# Disclaimer: This is a modified version of the Camunda REST API specification, optimized for the documentation.

openapi: "3.0.3"
info:
  title: Camunda 8 REST API
  version: "0.1"
  description: API for communicating with a Camunda 8 cluster.
  license:
    name: Camunda License Version 1.0
    url: https://github.com/camunda/camunda/blob/main/licenses/CAMUNDA-LICENSE-1.0.txt
externalDocs:
  description: Find out more
  url: https://docs.camunda.io/docs/apis-tools/camunda-api-rest/overview/

servers:
  - url: "{schema}://{host}:{port}/v2"
    variables:
      host:
        default: localhost
        description: The hostname of the Camunda 8 REST Gateway.
      port:
        default: "8080"
        description: The port of the Camunda 8 REST API server.
      schema:
        default: http
        description: The schema of the Camunda 8 REST API server.

paths:
  /jobs/activation:
    post:
      tags:
        - Job
      summary: Activate jobs
      description: |
        Iterate through all known partitions and activate jobs up to the requested maximum.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/JobActivationRequest"
      responses:
        "200":
          description: The list of activated jobs.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobActivationResponse"
            application/vnd.camunda.api.keys.number+json:
              schema:
                $ref: "#/components/schemas/JobActivationResponse"
            application/vnd.camunda.api.keys.string+json:
              schema:
                $ref: "#/components/schemas/JobActivationResult"
        "400":
          description: >
            The provided data is not valid.
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          description: >
            An internal error occurred while processing the request.
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"

  /decision-definitions/evaluation:
    post:
      tags:
        - Decision definition
      summary: Evaluate decision
      description: |
        Evaluates a decision.
        You specify the decision to evaluate either by using its unique key (as returned by
        DeployResource), or using the decision ID. When using the decision ID, the latest deployed
        version of the decision is used.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EvaluateDecisionRequest"
            examples:
              "By decision definition key":
                summary: "Evaluate the decision by decisionDefinitionKey."
                value:
                  decisionDefinitionKey: 12345
                  variables: {}
              "By decision definition ID":
                summary: "Evaluate the decision by decisionDefinitionId."
                value:
                  decisionDefinitionId: "1234-5678"
                  variables: {}
          application/vnd.camunda.api.keys.number+json:
            schema:
              $ref: "#/components/schemas/EvaluateDecisionRequest"
          application/vnd.camunda.api.keys.string+json:
            schema:
              $ref: "#/components/schemas/DecisionEvaluationInstruction"
      responses:
        "200":
          description: The decision was evaluated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EvaluateDecisionResponse"
            application/vnd.camunda.api.keys.number+json:
              schema:
                $ref: "#/components/schemas/EvaluateDecisionResponse"
            application/vnd.camunda.api.keys.string+json:
              schema:
                $ref: "#/components/schemas/EvaluateDecisionResult"
        "400":
          description: The provided data is not valid.
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "404":
          description: The decision is not found.
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          description: An internal error occurred while processing the request.
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"

components:
  schemas:
    ProblemDetail:
      description: >
        A Problem detail object as described in [RFC 9457](https://www.rfc-editor.org/rfc/rfc9457).
        There may be additional properties specific to the problem type.
      type: object
      properties:
        type:
          type: string
          format: uri
          description: A URI identifying the problem type.
          default: about:blank
        title:
          type: string
          description: A summary of the problem type.
        status:
          type: integer
          format: int32
          description: The HTTP status code for this problem.
          minimum: 400
          maximum: 600
        detail:
          type: string
          description: An explanation of the problem in more detail.
        instance:
          type: string
          format: uri
          description: A URI identifying the origin of the problem.

    JobActivationRequest:
      type: object
      properties:
        type:
          description: >
            the job type, as defined in the BPMN process (e.g. <zeebe:taskDefinition
            type="payment-service" />)
          type: string
        worker:
          description: the name of the worker activating the jobs, mostly used for logging purposes
          type: string
          nullable: true
        timeout:
          description: >
            a job returned after this call will not be activated by another call until the
            timeout (in ms) has been reached
          type: integer
          format: int64
        maxJobsToActivate:
          description: the maximum jobs to activate by this request
          type: integer
          format: int32
        fetchVariable:
          description: >
            a list of variables to fetch as the job variables; if empty, all visible variables at
            the time of activation for the scope of the job will be returned
          type: array
          nullable: true
          items:
            type: string
        requestTimeout:
          description: >
            The request will be completed when at least one job is activated or after the
            requestTimeout (in ms). If the requestTimeout = 0, a default timeout is used.
            If the requestTimeout < 0, long polling is disabled and the request is completed
            immediately, even when no job is activated.
          type: integer
          format: int64
          default: 0
          nullable: true
        tenantIds:
          description: a list of IDs of tenants for which to activate jobs
          type: array
          items:
            type: string
          nullable: true
      required:
        - type
        - timeout
        - maxJobsToActivate
    JobActivationResponse:
      description: The list of activated jobs
      deprecated: true
      type: object
      properties:
        jobs:
          type: array
          items:
            $ref: "#/components/schemas/ActivatedJob"
    JobActivationResult:
      description: The list of activated jobs. Key attributes as string values.
      type: object
      properties:
        jobs:
          type: array
          items:
            $ref: "#/components/schemas/ActivatedJobResult"
    ActivatedJobBase:
      description: Base properties for ActivatedJob
      type: object
      properties:
        type:
          description: the type of the job (should match what was requested)
          type: string
        processDefinitionId:
          description: the bpmn process ID of the job's process definition
          type: string
        processDefinitionVersion:
          description: the version of the job's process definition
          type: integer
          format: int32
        elementId:
          description: the associated task element ID
          type: string
        customHeaders:
          description: a set of custom headers defined during modelling; returned as a serialized JSON document
          type: object
          additionalProperties: true
        worker:
          description: the name of the worker which activated this job
          type: string
        retries:
          description: the amount of retries left to this job (should always be positive)
          type: integer
          format: int32
        deadline:
          description: when the job can be activated again, sent as a UNIX epoch timestamp
          type: integer
          format: int64
        variables:
          description: All variables visible to the task scope, computed at activation time
          type: object
          additionalProperties: true
        tenantId:
          description: The ID of the tenant that owns the job
          type: string
    ActivatedJob:
      deprecated: true
      type: object
      allOf:
        - $ref: "#/components/schemas/ActivatedJobBase"
      properties:
        jobKey:
          description: the key, a unique identifier for the job
          type: integer
          format: int64
        processInstanceKey:
          description: the job's process instance keyÂ©
          type: integer
          format: int64
        processDefinitionKey:
          description: the key of the job's process definition
          type: integer
          format: int64
        elementInstanceKey:
          description: |
            the unique key identifying the associated task, unique within the scope of the process instance
          type: integer
          format: int64
    ActivatedJobResult:
      type: object
      allOf:
        - $ref: "#/components/schemas/ActivatedJobBase"
      properties:
        jobKey:
          description: the key, a unique identifier for the job
          type: string
        processInstanceKey:
          description: the job's process instance keyÂ©
          type: string
        processDefinitionKey:
          description: the key of the job's process definition
          type: string
        elementInstanceKey:
          description: |
            the unique key identifying the associated task, unique within the scope of the process instance
          type: string

        decisionRequirementsKey:
          type: string
          description: The assigned key, which acts as a unique identifier for this decision requirements.

    EvaluateDecisionRequestBase:
      description: Base properties for EvaluateDecisionRequest
      type: object
      properties:
        decisionDefinitionId:
          description: |
            The ID of the decision to be evaluated.
            Cannot be used together with decisionDefinitionKey. When using the decision ID, the latest
            deployed version of the decision is used.
          type: string
        variables:
          description: The message variables as JSON document.
          additionalProperties: true
          type: object
        tenantId:
          description: The tenant ID of the decision.
          type: string
    EvaluateDecisionRequest:
      deprecated: true
      type: object
      allOf:
        - $ref: "#/components/schemas/EvaluateDecisionRequestBase"
      properties:
        decisionDefinitionKey:
          description: |
            The unique key identifying the decision to be evaluated.
            Cannot be used together with decisionDefinitionId.
          type: integer
          format: int64
    DecisionEvaluationInstruction:
      type: object
      allOf:
        - $ref: "#/components/schemas/EvaluateDecisionRequestBase"
      properties:
        decisionDefinitionKey:
          description: |
            The unique key identifying the decision to be evaluated.
            Cannot be used together with decisionDefinitionId.
          type: string
    EvaluateDecisionResponseBase:
      description: Base properties for EvaluateDecisionResponse
      type: object
      properties:
        decisionDefinitionId:
          description: The ID of the decision which was evaluated.
          type: string
        decisionDefinitionName:
          description: The name of the decision which was evaluated.
          type: string
        decisionDefinitionVersion:
          description: The version of the decision which was evaluated.
          type: integer
          format: int32
        decisionRequirementsId:
          description: The ID of the decision requirements graph that the decision which was evaluated is part of.
          type: string
        output:
          description: |
            JSON document that will instantiate the result of the decision which was evaluated.
          type: string
        failedDecisionDefinitionId:
          description: The ID of the decision which failed during evaluation.
          type: string
        failureMessage:
          description: Message describing why the decision which was evaluated failed.
          type: string
        tenantId:
          description: The tenant ID of the evaluated decision.
          type: string
    EvaluateDecisionResponse:
      deprecated: true
      type: object
      allOf:
        - $ref: "#/components/schemas/EvaluateDecisionResponseBase"
      properties:
        decisionDefinitionKey:
          description: The unique key identifying the decision which was evaluated.
          type: integer
          format: int64
        decisionRequirementsKey:
          description: The unique key identifying the decision requirements graph that the decision which was evaluated is part of.
          type: integer
          format: int64
        decisionInstanceKey:
          description: The unique key identifying this decision evaluation.
          type: integer
          format: int64
        evaluatedDecisions:
          type: array
          items:
            $ref: "#/components/schemas/EvaluatedDecisionItem"
    EvaluateDecisionResult:
      type: object
      allOf:
        - $ref: "#/components/schemas/EvaluateDecisionResponseBase"
      properties:
        decisionDefinitionKey:
          description: The unique key identifying the decision which was evaluated.
          type: string
        decisionRequirementsKey:
          description: The unique key identifying the decision requirements graph that the decision which was evaluated is part of.
          type: string
        decisionInstanceKey:
          description: The unique key identifying this decision evaluation.
          type: string
        evaluatedDecisions:
          type: array
          items:
            $ref: "#/components/schemas/EvaluatedDecisionResult"
    EvaluatedDecisionItemBase:
      description: Base properties for EvaluatedDecisionItem
      type: object
      properties:
        decisionDefinitionId:
          description: The ID of the decision which was evaluated.
          type: string
        decisionDefinitionName:
          description: The name of the decision which was evaluated.
          type: string
        decisionDefinitionVersion:
          description: The version of the decision which was evaluated.
          type: integer
          format: int32
        decisionDefinitionType:
          description: The type of the decision which was evaluated.
          type: string
        output:
          description: |
            JSON document that will instantiate the result of the decision which was evaluated.
          type: string
        tenantId:
          description: The tenant ID of the evaluated decision.
          type: string
        matchedRules:
          type: array
          items:
            $ref: "#/components/schemas/MatchedDecisionRuleItem"
        evaluatedInputs:
          type: array
          items:
            $ref: "#/components/schemas/EvaluatedDecisionInputItem"
    EvaluatedDecisionItem:
      description: List of decisions that were evaluated within the requested decision evaluation.
      deprecated: true
      type: object
      allOf:
        - $ref: "#/components/schemas/EvaluatedDecisionItemBase"
      properties:
        decisionDefinitionKey:
          description: The unique key identifying the decision which was evaluate.
          type: integer
          format: int64
    EvaluatedDecisionResult:
      description: List of decisions that were evaluated within the requested decision evaluation. Key attributes as string values.
      type: object
      allOf:
        - $ref: "#/components/schemas/EvaluatedDecisionItemBase"
      properties:
        decisionDefinitionKey:
          description: The unique key identifying the decision which was evaluate.
          type: string
    MatchedDecisionRuleItem:
      type: object
      description: The decision rules that matched within this decision evaluation.
      properties:
        ruleId:
          description: The ID of the matched rule.
          type: string
        ruleIndex:
          description: The index of the matched rule.
          type: integer
          format: int32
        evaluatedOutputs:
          type: array
          items:
            $ref: "#/components/schemas/EvaluatedDecisionOutputItem"
    EvaluatedDecisionInputItem:
      type: object
      description: The decision inputs that were evaluated within this decision evaluation.
      properties:
        inputId:
          description: The ID of the evaluated decision input.
          type: string
        inputName:
          description: The name of the evaluated decision input.
          type: string
        inputValue:
          description: The value of the evaluated decision input.
          type: string
    EvaluatedDecisionOutputItem:
      type: object
      description: The evaluated decision outputs.
      properties:
        outputId:
          description: The ID of the evaluated decision output.
          type: string
        outputName:
          description: The name of the evaluated decision output.
          type: string
        outputValue:
          description: The value of the evaluated decision output.
          type: string

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
