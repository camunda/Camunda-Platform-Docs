name: sync-board

on:
  pull_request:
    types:
      - labeled

jobs:
  sync-board:
    # if: github....reviewer == "christina" or "amara"
    # if: ....label.name === "needs-docs-review"
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        id: github_context_step
        run: echo '${{ toJSON(github.event) }}'
      # filter based on reviewer assigned?
      # move to board
      - name: Get project data
        env:
          GITHUB_TOKEN: ${{ secrets.ADD_TO_PROJECT_PAT }}
          ORGANIZATION: camunda
          PROJECT_NUMBER: 27
        run: |
          gh api graphql -f query='
            query($org: String!, $number: Int!) {
              organization(login: $org){
                projectV2(number: $number) {
                  id
                  fields(first:20) {
                    nodes {
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                        options {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }
            }' -f org=$ORGANIZATION -F number=$PROJECT_NUMBER > project_data.json

          echo 'PROJECT_ID='$(jq '.data.organization.projectV2.id' project_data.json) >> $GITHUB_ENV
          echo 'STATUS_FIELD_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Status") | .id' project_data.json) >> $GITHUB_ENV
          echo 'IN_REVIEW_OPTION_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Status") | .options[] | select(.name=="ðŸ‘€ In Review") |.id' project_data.json) >> $GITHUB_ENV
      - name: Add PR to project
        env:
          GITHUB_TOKEN: ${{ secrets.ADD_TO_PROJECT_PAT }}
          PR_ID: ${{ github.event.pull_request.node_id }}
        run: |
          item_id="$( gh api graphql -f query='
            mutation($project:ID!, $pr:ID!) {
              addProjectV2ItemById(input: {projectId: $project, contentId: $pr}) {
                item {
                  id
                }
              }
            }' -f project=$PROJECT_ID -f pr=$PR_ID --jq '.data.addProjectV2ItemById.item.id')"

            echo 'ITEM_ID='$item_id >> $GITHUB_ENV
      # - name: Set fields
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.ADD_TO_PROJECT_PAT }}
      #   run: |
      #     gh api graphql -f query='
      #       mutation (
      #         $project: ID!
      #         $item: ID!
      #         $status_field: ID!
      #         $status_value: String!
      #       ) {
      #         set_status: updateProjectV2ItemFieldValue(input: {
      #           projectId: $project
      #           itemId: $item
      #           fieldId: $status_field
      #           value: {
      #             singleSelectOptionId: $status_value
      #             }
      #         }) {
      #           projectV2Item {
      #             id
      #             }
      #         }
      #       }' -f project=$PROJECT_ID -f item=$ITEM_ID -f status_field=$STATUS_FIELD_ID -f status_value=${{ env.IN_REVIEW_OPTION_ID }}

      # --silent

      # - uses: alex-page/github-project-automation-plus@v0.8.1 # Error: Could not find the column "ðŸ‘€ In review" or project "Documentation Board"
      #   with: # - uses: alex-page/github-project-automation-plus@v0.8.1
      #     project: Documentation
      #     column: Review
      #     repo-token: ${{ secrets.ADD_TO_PROJECT_PAT }}
